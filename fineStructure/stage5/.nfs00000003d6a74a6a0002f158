#!/bin/bash



folder=/pasteur/zeus/projets/p02/Hotpaleo/pierre/Projects/RAICES/

SinguExec="singularity exec --home $HOME:/home/$USER --bind /pasteur "

folderImg=/pasteur/zeus/projets/p02/Hotpaleo/common_data/VMs/singularity/
fsImage=$folderImg/evolbioinfo-finestructure-v4.1.1.img

folderScripts=/pasteur/zeus/projets/p02/Hotpaleo/pierre/Scripts/RAICES/fineStructure/stage5/

commandConvert="$SinguExec $fsImage impute2chromopainter.pl"
#commandConvert="perl $folderScripts/2b_impute2chromopainter.pl"
commandFs="$SinguExec $fsImage fs"
commandCombine="$SinguExec $fsImage chromocombine"

module load singularity
module load java


###stage5
#estimated the mutation/emission and the switch rate parameters


###for parallelization of stage1 and stage2
totalAdmInd=$(awk '{if($3==0)print $0}' $folder/fineStructure/Inputs/Genotipos_Raices.Plink.Autosomal.HGDP_1KG_SGDP_REDUCED.Filtered.MAF0.0000001.GENO1.MIND1_STEP1.ids | wc -l)
totalDonorInd=$(awk '{if($3==1)print $0}' $folder/fineStructure/Inputs/Genotipos_Raices.Plink.Autosomal.HGDP_1KG_SGDP_REDUCED.Filtered.MAF0.0000001.GENO1.MIND1_STEP1.ids | wc -l)
totalInd=$(awk '{if($3==1)print $0}' $folder/fineStructure/Inputs/Genotipos_Raices.Plink.Autosomal.HGDP_1KG_SGDP_REDUCED.Filtered.MAF0.0000001.GENO1.MIND1_ALL.ids | wc -l)
let ' diff = totalInd - totalDonorInd - totalAdmInd ' 
if [[ $diff != 0 ]]
then
	echo "pb num inds: $totalInd not $totalDonorInd + $totalAdmInd"
	exit
fi



mkdir $folder/fineStructure/Outputs/stage5/


cd $folder/fineStructure/Outputs/stage1/
mu=$(awk '{if(NR==2)print $2}' stage1.Combined)
Ne=$(awk '{if(NR==2)print $1}' stage1.Combined)

echo $mu $Ne

cd ../stage4/FinalGroups/
listCluster=$(ls *.DonorInds)

cd ../../stage5

rm stage5.DonorList
nTotalDonor=0
rm stage5.ids
for clusterFile in $listCluster
do
	cluster=$(echo $clusterFile | sed  s/.DonorInds//g)
	nCluster=$(wc -l ../stage4/FinalGroups/$clusterFile | awk '{print $1}')
	let ' nTotalDonor = nTotalDonor + nCluster '
	let ' nCluster = nCluster * 2 '
	echo $cluster $nCluster  >> stage5.DonorList
	awk -v c=$cluster -v OFS="\t" '{print $1,c,1}' ../stage4/FinalGroups/$clusterFile >> stage5.ids
	
done

awk -v OFS="\t" '{if($3==0)print $1,$2,1}' $folder/fineStructure/Inputs/Genotipos_Raices.Plink.Autosomal.HGDP_1KG_SGDP_REDUCED.Filtered.MAF0.0000001.GENO1.MIND1_STEP1.ids >> stage5.ids
if [[ $nTotalDonor !=  $totalDonorInd ]]
then 
	echo "nTotalDonor found: $nTotalDonor vs $totalDonorInd expected"
	exit
fi
let ' nTotalDonor = nTotalDonor * 2 '
####now stage 2: (describe by Ongaro et al. 2019): 
#We reconstruct each individual’s chromosomes as a series of genomic fragments inherited (copied) from a set of donor individuals,
# using the information on the allelic state of recipient and donors at each available position. 
#Briefly, we ‘painted’ the genomic profile of each donor as the combination of fragments received from other donor individuals.


mkdir logs/
if [ ! -e stage5.chunkcounts.out ]
then
	for i in 22
	do
		if [ ! -s stage5.chr$i.regionsquaredchunkcounts.out ]
		then
			mkdir chr$i
			
			###the four header lines NUMhaplotype Donors; NUM total ind; NUM snps; Positions
			echo $nTotalDonor > chr$i/chr$i.phase
			echo $totalInd >> chr$i/chr$i.phase
		 	sed -n 2,3p $folder/fineStructure/Inputs/Genotipos_Raices.Plink.Autosomal.HGDP_1KG_SGDP_REDUCED.Filtered.MAF0.0000001.GENO1.MIND1.chr$i"_alignedRef_phased.phase" >> chr$i/chr$i.phase
			numLinePhase=$(wc -l $folder/fineStructure/Inputs/Genotipos_Raices.Plink.Autosomal.HGDP_1KG_SGDP_REDUCED.Filtered.MAF0.0000001.GENO1.MIND1.chr$i"_alignedRef_phased.phase" | awk '{print $1}')
			numLineNew=$(wc -l  chr$i/chr$i.phase)
			let ' numLineNew = numLineNew + 1 '
			if [[ $numLineNew -eq $numLinePhase ]]
			then
				echo  chr$i/chr$i.phase already generated
			else
				echo generating  chr$i/chr$i.phase
				###prepare the reordered phase file
				while read line
				do
					a=($line)
					id=${a[0]}
					numFound=$(awk -v id=$id 'BEGIN{s=0} {if($1==id)s=s+1} END{print s}' $folder/fineStructure/Inputs/Genotipos_Raices.Plink.Autosomal.HGDP_1KG_SGDP_REDUCED.Filtered.MAF0.0000001.GENO1.MIND1_ALL.ids)
					if [[ $numFound != 1 ]]
					then
						echo "pb chr$i: $id found $numFound times"
						exit
					fi
					### get the line for phase
					line=$(awk -v id=$id '{if($1==id)print NR+2}' $folder/fineStructure/Inputs/Genotipos_Raices.Plink.Autosomal.HGDP_1KG_SGDP_REDUCED.Filtered.MAF0.0000001.GENO1.MIND1_ALL.ids)
					if [[ $line -lt 3 ]] || [[ $line -gt $numLinePhase ]]
					then
						echo "pb chr$i: $id line weird ($line)"
						exit
					fi
					awk -v line=$line '{if(NR==line)print $0}' $folder/fineStructure/Inputs/Genotipos_Raices.Plink.Autosomal.HGDP_1KG_SGDP_REDUCED.Filtered.MAF0.0000001.GENO1.MIND1.chr$i"_alignedRef_phased.phase" >> chr$i/chr$i.phase 
				
				done < stage5.ids
			fi
			jobS5paral=$(sbatch -J S5.$i -o logs/stage5.chr$i.o -e logs/stage5.chr$i.e --mem=4G --cpus-per-task=3 --time=6:00:00 \
				--wrap "$commandFs cp \
				-g $folder/fineStructure/Outputs/stage5/chr$i/chr$i.phase \
				-r $folder/fineStructure/Inputs/chr$i.recomb \
				-t $folder/fineStructure/Outputs/stage5/stage5.ids \
				-f $folder/fineStructure/Outputs/stage5/stage5.DonorList\
				-k 100 \
				-M $mu \
				-n $Ne \
				-o  $folder/fineStructure/Outputs/stage5/chr$i/stage5.chr$i")
		else
			echo  $cluster/stage5.chr$i already generated
		fi
	done
else
	echo stage5 already generated
fi
